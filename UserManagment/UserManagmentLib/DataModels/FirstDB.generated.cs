//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace UserManagmentLib.DataModels
{
	/// <summary>
	/// Database       : first_db
	/// Data Source    : first_db
	/// Server Version : 3.14.2
	/// </summary>
	public partial class FirstDB : LinqToDB.Data.DataConnection
	{
		public ITable<Role> Roles { get { return this.GetTable<Role>(); } }
		public ITable<User> Users { get { return this.GetTable<User>(); } }

		public FirstDB()
		{
			InitDataContext();
		}

		public FirstDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();
	}

	[Table("roles")]
	public partial class Role
	{
		[Column("id",   DbType="integer",   DataType=DataType.Int64), PrimaryKey, Identity] public long   Id   { get; set; } // integer
		[Column("name", DbType="text(max)", DataType=DataType.Text),  NotNull             ] public string Name { get; set; } // text(max)

		#region Associations

		/// <summary>
		/// FK_users_0_0_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="RoleId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<User> Users { get; set; }

		#endregion
	}

	[Table("users")]
	public partial class User
	{
		[Column("id",            DbType="integer",      DataType=DataType.Int64),     PrimaryKey,  Identity] public long      Id           { get; set; } // integer
		[Column("user_name",     DbType="varchar(max)", DataType=DataType.VarChar),   NotNull              ] public string    UserName     { get; set; } // varchar(max)
		[Column("surname",       DbType="varchar(max)", DataType=DataType.VarChar),   NotNull              ] public string    Surname      { get; set; } // varchar(max)
		[Column("firstname",     DbType="varchar(max)", DataType=DataType.VarChar),   NotNull              ] public string    Firstname    { get; set; } // varchar(max)
		[Column("patronymic",    DbType="varchar(max)", DataType=DataType.VarChar),      Nullable          ] public string    Patronymic   { get; set; } // varchar(max)
		[Column("email",         DbType="varchar(max)", DataType=DataType.VarChar),   NotNull              ] public string    Email        { get; set; } // varchar(max)
		[Column("birth_date",    DbType="datetime2",    DataType=DataType.DateTime2),    Nullable          ] public DateTime? BirthDate    { get; set; } // datetime2
		[Column("sex",           DbType="char(max)",    DataType=DataType.Char),         Nullable          ] public string    Sex          { get; set; } // char(max)
		[Column("mobile_number", DbType="varchar(max)", DataType=DataType.VarChar),   NotNull              ] public string    MobileNumber { get; set; } // varchar(max)
		[Column("role_id",       DbType="integer",      DataType=DataType.Int64),     NotNull              ] public long      RoleId       { get; set; } // integer
		[Column("deleted",       DbType="tinyint",      DataType=DataType.Byte),      NotNull              ] public byte      Deleted      { get; set; } // tinyint
		[Column("is_active",     DbType="tinyint",      DataType=DataType.Byte),      NotNull              ] public byte      IsActive     { get; set; } // tinyint

		#region Associations

		/// <summary>
		/// FK_users_0_0
		/// </summary>
		[Association(ThisKey="RoleId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_users_0_0", BackReferenceName="Users")]
		public Role Role { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Role Find(this ITable<Role> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static User Find(this ITable<User> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}
